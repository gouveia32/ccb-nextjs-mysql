// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  Int
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  notes Note[]
  tags Tag[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}



model Note {
  id  String @default(cuid()) @id
  name String
  noteType String @default("TEXT")
  content String
  color String
  pinned Boolean
  createdAt DateTime @default(now())
  tags Tag[]
  checkPoints CheckPoint[]
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Tag {
  id String @default(cuid()) @id
  name String
  createdAt DateTime @default(now())
  notes Note[]
  user User @relation(fields: [userId], references: [id])
  userId String
}

model CheckPoint {
  id String @default(cuid()) @id
  text String
  checked Boolean
  note Note @relation(fields: [noteId], references: [id])
  noteId String
}




//
//
////////////////////////


model Conta {
  id                 String    @id @default(cuid())
  medicoId           String
  tipoProvedor       String
  provedorId         String
  contaProvedorId    Int
  tokenRefresh       String?
  tokenAcesso        String?
  tokenAcessoExpira  DateTime?
  criadoEm           DateTime  @default(now())
  alteradoEm         DateTime  @updatedAt
  medico             Medico    @relation(fields: [medicoId], references: [id])

  @@unique([provedorId, contaProvedorId])
}

model Sessao {
  id           String   @id @default(cuid())
  medicoId     String
  expira       DateTime
  tokenSessao  String   @unique
  tokenAcesso  String   @unique
  criadoEm     DateTime @default(now())
  alteradoEm   DateTime @updatedAt
  medico       Medico   @relation(fields: [medicoId], references: [id])
}

model Medico {
  id              String    @id @default(cuid())
  nome            String?
  email           String?   @unique
  emailVerificado DateTime?
  imagem          String?
  criadoEm        DateTime  @default(now())
  alteradoEm      DateTime  @updatedAt
  contas          Conta[]
  sessoes         Sessao[]
  notas           Nota[]
  pacientes       Paciente[]
}

model SolVerificacao {
  id            String   @id @default(cuid())
  identificador String
  token         String   @unique
  expira        DateTime
  criadoEm     DateTime @default(now())
  alteradoEm   DateTime @updatedAt

  @@unique([identificador, token])
}



model Nota {
  id          String @default(cuid()) @id
  nome        String
  tipoNota    String @default("TEXT")
  conteudo    String
  cor         String
  pino        Boolean
  criadoEm     DateTime @default(now())
  pacientes   Paciente[]
  controles   Controle[]
  medico      Medico @relation(fields: [medicoId], references: [id])
  medicoId    String
}

model Paciente {
  id            String @default(cuid()) @id
  nome          String
  criadoEm      DateTime @default(now())
  notas         Nota[]
  medico        Medico @relation(fields: [medicoId], references: [id])
  medicoId      String
}

model Controle {
  id        String @default(cuid()) @id
  texto     String
  marcado   Boolean
  nota      Nota @relation(fields: [notaId], references: [id])
  notaId    String
}


//model Paciente2 {
//  id              Int        @id @default(autoincrement())
//  nome            String
//  cpf             String?
//  email           String?
//  data_nascimento DateTime? 
//  data_cadastro   DateTime?  @default(now())
//  peso            Int
//  altura          Int
//  tipo_sanguineo  String
//  status          Int        @default(1)
//}
