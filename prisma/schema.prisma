// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String    @id @default(cuid())
  doctorId           String
  providerType       String
  providerId         String
  providerAccountId  Int
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  doctor             Doctor     @relation(fields: [doctorId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  doctorId     String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  doctor       Doctor     @relation(fields: [doctorId], references: [id])
}

model Doctor  {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  tags          Tag[]
}

model Patient  {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  telephone     String?
  height        Int?
  weight        Int?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  notes         Note[]
}


model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Note {
  id          String @default(cuid()) @id
  name        String
  noteType    String @default("TEXT")
  content     String
  color       String
  pinned      Boolean
  createdAt   DateTime @default(now())
  tags        Tag[]
  checkPoints CheckPoint[]
  doctor       Doctor     @relation(fields: [doctorId], references: [id])
  doctorId    String
  patient     Patient     @relation(fields: [patientId], references: [id])
  patientId   String
  }

model Tag {
  id        String @default(cuid()) @id
  name      String
  createdAt DateTime @default(now())
  notes     Note[]
  doctor       Doctor     @relation(fields: [doctorId], references: [id])
  doctorId  String
}

model CheckPoint {
  id      String @default(cuid()) @id
  text    String
  checked Boolean
  note    Note @relation(fields: [noteId], references: [id])
  noteId  String
}


//model Paciente2 {
//  id              Int        @id @default(autoincrement())
//  nome            String
//  cpf             String?
//  email           String?
//  data_nascimento DateTime? 
//  data_cadastro   DateTime?  @default(now())
//  peso            Int
//  altura          Int
//  tipo_sanguineo  String
//  status          Int        @default(1)
//}


// risma migrate dev --name init
// pscale deploy-request create pe-nextjs initial-setup
// pscale connect pe-nextjs  main --port 3309
// pscale connect pe-nextjs shadow --port 3310
